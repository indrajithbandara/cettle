<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1443904283835">{:repl-history {:ide [], :local [&quot;(:value(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                  :list :dirs-and-files}))&quot; &quot;(:dirs-and-files (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :list :dirs-and-files}))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (clojure.string/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;)) {:list :execution})))&quot; &quot;(:list (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :list :dirs-and-files}))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (clojure.string/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;)) {:list :exec})))&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :list :dirs-and-files})&quot; &quot;(ns cetl.file.management\n  (:require [clojure.string :as s]\n            [clojure.java.io :as io])\n  (:import (org.apache.commons.io FileUtils)\n           (java.io File)))&quot; &quot;(use '[clojure.java.shell :only [sh]])&quot; &quot;(defmulti cetl-file-list (fn [x] (:list x)))&quot; &quot;(defmethod cetl-file-list :files\n  [path]\n  (clojure.string/split\n    (get (clojure.java.shell/sh\n           \&quot;sh\&quot; \&quot;-c\&quot;\n           (str \&quot; cd \&quot; (:path path) \&quot;;\&quot;\n                \&quot; find `pwd` -type f -maxdepth 1 \&quot;))\n         :out) #\&quot;\\n\&quot;))&quot; &quot;  quot&quot; &quot;s&quot; &quot;(defmethod cetl-file-list :files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command  \&quot; find `pwd` -type f -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (s/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;))\n      {:files :exec})))&quot; &quot;(defmethod cetl-file-list :files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command  \&quot; find `pwd` -type f -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (s/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;))\n      {:list :exec})))&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :list :files})&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :list :dirs})&quot; &quot;(defmethod cetl-file-list :dirs-only-sub-dirs\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command  \&quot; find `pwd` -type d \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (s/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;))\n      {:list :exec})))&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :list :dirs-only-sub-dirs})&quot; &quot;(cetl-file-temp-create \&quot;/Users/gregadebesin/foo.txt\&quot;)&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/foo.txt\&quot;\n                        :file-name \&quot;foo.txt\&quot;})&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin\&quot;\n                        :file-name \&quot;foo.txt\&quot;})&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (io/writer\n    (io/file\n      (str (:path x) \&quot;/\&quot; (:file-name x)))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin\&quot;\n                        :file-name \&quot;foo1.txt\&quot;})&quot; &quot;(defn cetl-file-delete\n  [x]\n  (io/delete-file \n    (io/file \n      (str (:path x) \&quot;/\&quot; (:file-name x)))))&quot; &quot;(cetl-file-delete {:path \&quot;/Users/gregadebesin\&quot; \n                   :file-name \&quot;foo.txt\&quot;})&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file-path (io/file x)]\n    file-path))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file-path (io/file (:path x))]\n    file-path))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file-path (File. (:path x))]\n    file-path))&quot; &quot;(cetl-file-properties {:path \&quot;/Users/gregadebesin/Development/Cetl/archive.zp\&quot;})&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file-path (File. (:path x))]\n    (if (.exists file-path) (.getPath file-path) nil)))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file-path\n        (if (.exists (File. (:path x))) x nil)]\n    file-path))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file-path\n        (if (.exists (File. (:path x))) x nil)]\n    (:path file-path)))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file-path\n        (if (.exists (File. (:path x))) (:path x) nil)]\n    file-path))&quot; &quot;1&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [abs-file-path (if (.exists (File. (:path x))) (:path x) nil)\n        ]))&quot; &quot;(if (.exists (File. )) (:path x) nil)&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path \n        (if (.exists file) (.getAbsolutePath file) nil)]\n    abs-file-path))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        ] abs-file-path))&quot; &quot;(cetl-file-properties {:path \&quot;/Users/gregadebesin/Development/Cetl/archive.zi\&quot;})&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        dir-name (.getParent file)]\n    dir-name))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getFileName file)]\n    file-name))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)]\n    file-name))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        rw-permissions (.canRead file)]\n    rw-permissions))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)]\n    write-permissions))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)]\n    execute-permissions))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (quot (.length file) 1024)]))&quot; &quot;(reduce (fn [x y] (+ x y)) [2 2 2])&quot; &quot;(reduce (fn [x y] (+ x y)) [2 2 4])&quot; &quot;(reduce (fn [x y] (quot x y)) [1000 1024 1024])&quot; &quot;(reduce (fn [x y] (quot x y)) [1024 1400 1024])&quot; &quot;(reduce (fn [x y] (quot x y)) [1024 1024 1400])&quot; &quot;(reduce (fn [x y] (/ x y)) [1024 1024 1400])&quot; &quot;(double (reduce (fn [x y] (/ x y)) [1024 1024 1400]))&quot; &quot;(double (reduce (fn [x y] (/ x y)) [1024 1400 1024]))&quot; &quot;(double (reduce (fn [x y] (/ x y)) [1400 1024 1024]))&quot; &quot;(double (reduce (fn [x y] (/ x y)) [2000 1024 1024]))&quot; &quot;(double (reduce #(/ % %1) [2000 1024 1024]))&quot; &quot;(double (reduce #(/ % %) [2000 1024 1024]))&quot; &quot;(double (reduce #() [2000 1024 1024]))&quot; &quot;(double (reduce #(/ %1 %2) [2000 1024 1024]))&quot; &quot;(format \&quot;%.2f\&quot; (double (reduce #(/ %1 %2) [2000 1024 1024])))&quot; &quot;(format \&quot;%.3f\&quot; (double (reduce #(/ %1 %2) [2000 1024 1024])))&quot; &quot;(double (format \&quot;%.3f\&quot; (double (reduce #(/ %1 %2) [2000 1024 1024]))))&quot; &quot;(read-string (format \&quot;%.3f\&quot; (double (reduce #(/ %1 %2) [2000 1024 1024]))))&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [2000 1024 1024]) \n     double \n     (format \&quot;%.3f\&quot;))&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [2000 1024 1024]) \n      double \n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [2000 1024 1024]) \n      double \n     (format \&quot;%.3f\&quot;)\n      read-string)&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [2000 1024 1024])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)]\n    file-size))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1024 1024])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)]\n    file-size))&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [97354744 1024])\n     double\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [97354744 1024 1024])\n     double\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(quot %1 %2) [1024 97354744  1024])\n     double\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(quot %1 %2) [1024  1024 97354744])\n     double\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(quot %1 %2) [97354744 1024 1024])\n     long\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;double&quot; &quot;(-&gt;&gt; (reduce #(quot %1 %2) [97354744 1024 1024])\n     double\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [97354744 (* 1024 1024)])\n     double\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(.length (File. \&quot;/Users/gregadebesin/Development/Cetl/archive.zip\&quot;))&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [61734215 (* 1024 1024)])\n     double\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(* 1024 1024)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [61734215 1048576])\n     double\n     (format \&quot;%.4f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [61734215 1048576])\n     double\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [61734215 1048576])\n     long\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [61734215 1048576])\n     long\n     )&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [61734215 1048576])\n     float\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [6.17e+7 1048576])\n     float\n     (format \&quot;%.3f\&quot;)\n     read-string)&quot; &quot;(-&gt;&gt; (reduce #(/ %1 %2) [6.17e+7 1048576])\n     float\n     (format \&quot;%.3f\&quot;)\n     read-string)2&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)]\n    file-size))&quot; &quot;(.length (File. \&quot;/Users/gregadebesin/Development/Cetl/TestFiles.zip\&quot;))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time (.lastModified file)]\n    modified-time))&quot; &quot;(ns cetl.file.management\n  (:require [clojure.string :as s]\n            [clojure.java.io :as io])\n  (:import (org.apache.commons.io FileUtils)\n           (java.io File)\n           (java.text SimpleDateFormat)))&quot; &quot;(defmethod cetl-file-list :dirs\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command  \&quot; find `pwd` -type d -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (s/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;))\n      {:list :exec})))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time (.lastModified file)\n        modified-str (.SimpleDateFormat \&quot;MM/dd/yyyy HH:mm:ss\&quot;)]))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time (.lastModified file)\n        modified-str (.format SimpleDateFormat. \&quot;MM/dd/yyyy HH:mm:ss\&quot;)]))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time (.lastModified file)\n        modified-str (.format (SimpleDateFormat. \&quot;MM/dd/yyyy HH:mm:ss\&quot;))]))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time (.lastModified file)\n        modified-str ((.format modified-time) (SimpleDateFormat. \&quot;MM/dd/yyyy HH:mm:ss\&quot;))]\n    modified-str))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time (.lastModified file)\n        modified-str (.format (SimpleDateFormat. \&quot;MM/dd/yyyy HH:mm:ss\&quot;) modified-time)]\n    modified-str))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time (.lastModified file)\n        modified-str (.format (SimpleDateFormat. \&quot;MM/dd/yyyy HH:mm:ss.SSS\&quot;) modified-time)]\n    modified-str))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time (.lastModified file)\n        modified-str (.format (SimpleDateFormat. \&quot;yyyy-MM-dd HH:mm:ss.SSS\&quot;) modified-time)]\n    modified-str))&quot; &quot;(cetl-file-properties {:path \&quot;/Users/gregadebesin/Development/Cetl/archive.zip\&quot;})&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time-millis (.lastModified file)\n        modified-str (.format (SimpleDateFormat. \&quot;yyyy-MM-dd HH:mm:ss.SSS\&quot;) modified-time-millis)]\n    modified-str))&quot;], :remote []}}</component>
</project>