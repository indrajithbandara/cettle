<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1443305696396">{:repl-history {:ide [], :local [&quot;(defmethod cetl-file-encode :ISO-8859-15\n  [x]\n  (FileUtils/write\n    (File. (:path x))\n    (FileUtils/readFileToString\n      (File. (:path x)) \&quot;UTF-8\&quot; ) (name (:encode x))\n    {}))&quot; &quot;(defmethod cetl-file-encode :ISO-8859-15\n  [x]\n  (FileUtils/write\n    (File. (:path x))\n    (FileUtils/readFileToString\n      (File. (:path x)) \&quot;UTF-8\&quot;) (name (:encode x)))\n  {})&quot; &quot;(defmethod cetl-file-encode :ISO-8859-15\n  [x]\n  (FileUtils/write\n    (File. (:path x))\n    (FileUtils/readFileToString\n      (File. (:path x)) \&quot;UTF-8\&quot;) (name (:encode x)))\n  {:path x})&quot; &quot;(defmethod cetl-file-encode :ISO-8859-15\n  [x]\n  (FileUtils/write\n    (File. (:path x))\n    (FileUtils/readFileToString\n      (File. (:path x)) \&quot;UTF-8\&quot;) (name (:encode x)))\n  {:path})&quot; &quot;(defmethod cetl-file-encode :ISO-8859-15\n  [x]\n  (FileUtils/write\n    (File. (:path x))\n    (FileUtils/readFileToString\n      (File. (:path x)) \&quot;UTF-8\&quot;) (name (:encode x)))\n  x)&quot; &quot;(defmethod cetl-file-encode :ISO-8859-15\n  [x]\n  (FileUtils/write\n    (File. (:path x))\n    (FileUtils/readFileToString\n      (File. \n        (:path x)) \&quot;UTF-8\&quot;) \n    (name (:encode x))) x)&quot; &quot;(defmethod cetl-file-encode :UTF-8\n  [x]\n  (FileUtils/write\n     (File. (:path x))\n     (FileUtils/readFileToString\n       (File. \n         (:path x)) \&quot;ISO-8859-1\&quot;) \n     (name (:encode x))) x)&quot; &quot;(cetl-file-encode {:path \&quot;/Users/gregadebesin/IdeaProjects/cetl/resources/test-file.txt\&quot;\n                   :encode :ISO-8859-15})&quot; &quot;(cetl-file-encode {:path \&quot;/Users/gregadebesin/IdeaProjects/cetl/resources/test-file.txt\&quot;\n                   :encode :UTF-8})&quot; &quot;3&quot; &quot;22&quot; &quot;(map inc (range 1 12))&quot; &quot;(ns cetl.core-test\n  (:require [clojure.test :refer :all]\n            [cetl.core :refer :all]\n            [cetl.file.management :refer :all])\n  (:import (java.io File)\n           (org.apache.commons.io FileUtils)))&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :list :dirs-and-files})&quot; &quot;2&quot; &quot;(def list-files (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                 :list :dirs}))&quot; &quot;(map (fn [x] (cetl-file-archive {:path x :archive :zip})) list-files)&quot; &quot;(cetl)&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :list :dirs})&quot; &quot;(map #(clojure.string/replace \&quot; \&quot; \&quot;\\\\ \&quot; ) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot; :list :dirs}))&quot; &quot;(map #(clojure.string/replace \&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot; :list :dirs}))&quot; &quot;(map #(clojure.string/replace \&quot; \&quot; #\&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot; \n                                                          :list :dirs}))&quot; &quot;(map #(clojure.string/replace #\&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot; \n                                                          :list :dirs}))&quot; &quot;(map #(clojure.string/replace (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                               :list :dirs}) #\&quot; \&quot; \&quot;\\\\ \&quot;))&quot; &quot;(clojure.string/replace \&quot;/Users/gregadebesin/Development/Cetl/TestFiles copy\&quot; \&quot; \&quot; #\&quot;s\&quot;)&quot; &quot;(clojure.string/replace \&quot;/Users/gregadebesin/Development/Cetl/TestFiles copy\&quot; #\&quot; \&quot; \&quot;s\&quot;)&quot; &quot;(map #(clojure.string/replace % #\&quot;\\\\ \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot;\\\\ \&quot; \&quot;\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;/\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\/\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\/ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\&quot; \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(cetl-file-archive {:path \&quot;/Users/gregadebesin/Development/Cetl/TestFiles\\\&quot; 2\&quot;\n                    :zip})&quot; &quot;(cetl-file-archive {:path \&quot;/Users/gregadebesin/Development/Cetl/TestFiles\\\&quot; 2\&quot;\n                    :archive :zip})&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \\\\\&quot; \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;s \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; (str \&quot;\\\\ \&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; (str \&quot;\\\\\&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot;\&quot;\\\\\&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(\&quot;dad\\\\ \&quot;)&quot; &quot;(str \&quot;dad\\\\ \&quot;)&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\\&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                               :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; (str \&quot;\\\\ \&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; (str \&quot;\\\\\\\\ \&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; (str \&quot;\\\\ \\\\ \&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; (str \&quot;\\\\\\ \&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot;\\\\ \&quot; \&quot;\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\\\\\\&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\space \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \\space) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace % #\&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace String % #\&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #((memfn .replace String) % #\&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #((memfn .replace) % #\&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map (.replace String \&quot; \&quot; \&quot; \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map (.replace String. \&quot; \&quot; \&quot; \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(.replace \&quot;ddsaas\&quot; \&quot;s\&quot; \&quot;l\&quot;)&quot; &quot;(map #(.replace  %  \&quot; \&quot; \&quot;\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  ' ' \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  \\space \&quot;\\\\\&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  \&quot;\&quot; \&quot;\\\\\&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  \&quot; \&quot; \&quot;\\\\\&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  \&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  \&quot; \&quot; (str \&quot;/\\\\\&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  \&quot; \&quot; (str \&quot;/\&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  \&quot; \&quot; (str \&quot;\\\&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replace  %  \&quot; \&quot; (str \&quot;\\\\\&quot;)) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot;\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot; \\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot; \\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\\\\\\&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\\&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\ \&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;$\\\\ \&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\\\\\ \&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\\\\\\\\\ \&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\$\\\\\&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\$\\\\ \&quot;)&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot;$\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot;$\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace ))&quot; &quot;(map #(.replaceA  %  \&quot; \&quot; \&quot;$\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot;(\\s)\&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\ \&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;(mapv #(clojure.string/replace % #\&quot;\\\\ \&quot; \&quot;\\\\\\\\ \&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;(mapv #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\\\\\ \&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;[\&quot;/some/path/file\\ 1\&quot; \&quot;/some/path/file\\ 2\&quot;]&quot; &quot;[\&quot;/some/path/file\\\\ 1\&quot; \&quot;/some/path/file\\\\ 2\&quot;]&quot; &quot;(mapv #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\ \&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;(defmulti cetl-file-archive (fn [x] (:archive x)))\n\n(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (str move-to-dir (-&gt; (File. get-path .getParent)) next-command\n         zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n         rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last))))&quot; &quot;(defmulti cetl-file-archive (fn [x] (:archive x)))\n\n(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (str move-to-dir (-&gt; (File. get-path (.getParent))) next-command\n         zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n         rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last))))&quot; &quot;(defmulti cetl-file-archive (fn [x] (:archive x)))\n\n(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (str move-to-dir (.getParent (File. get-path)) next-command\n         zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n         rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last))))&quot; &quot;(ns cetl.file.management\n  (:require [clojure.string :as s])\n  (:import (org.apache.commons.io FileUtils)\n           (java.io File)))&quot; &quot;(use '[clojure.java.shell :only [sh]])&quot; &quot;(defmulti cetl-file-archive (fn [x] (:archive x)))&quot; &quot;(defmethod cetl-file-archive :zip\n  [path]\n  (clojure.java.shell/sh\n    \&quot;sh\&quot; \&quot;-c\&quot;\n    (str \&quot; cd \&quot; (.getParent (File. (:path path))) \&quot;/;\&quot;\n         \&quot; zip \&quot; (last (s/split (:path path) #\&quot;/\&quot;)) \&quot;.zip\&quot;\n         \&quot; -r \&quot; (last (s/split (:path path) #\&quot;/\&quot;)))))&quot; &quot;(cetl-file-archive {:path \&quot;/Users/gregadebesin/Development/Cetl/TestFiles\&quot;\n                    :archive :zip})&quot;], :remote []}}</component>
</project>