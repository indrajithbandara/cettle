<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1446152153580">{:repl-history {:ide [], :local [&quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :list :dirs-and-files})&quot; &quot;(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)\n        file-name (:file path)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (File. get-path) next-command\n           zip-command (str file-name file-ext)\n           rec-command file-name))\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (vector\n                    (str (:path path) \&quot;/\&quot; (:file path) file-ext)))\n      {:archive :exec})))&quot; &quot;(cetl-file-archive {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                    :file \&quot;archive\&quot;\n                    :archive :zip})&quot; &quot;(defmulti cetl-file-encode (fn [x] (:encode x)))&quot; &quot;(defmethod cetl-file-encode :UTF-8\n  [x]\n  (FileUtils/write\n     (File. (:path x))\n     (FileUtils/readFileToString\n       (File.\n         (:path x)) \&quot;ISO-8859-1\&quot;)\n     (name (:encode x))) x)&quot; &quot;2&quot; &quot;(map inc [])&quot; &quot;1&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (io/writer\n    (io/file\n      (str (:path x) \&quot;/\&quot; (:file-name x)))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file-name \&quot;foo.temp\&quot;})&quot; &quot;(defn cetl-file-temp-create\n  ([x &amp; {:keys [temp-create]}]\n   (let [file (:file x)\n         path (:path x)]\n     (io/writer\n       (io/file\n         (str path \&quot;/\&quot; file))))))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)]\n    (io/writer\n      (io/file\n        (str path \&quot;/\&quot; file)))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file-name \&quot;foo1.temp\&quot;\n                        :temp-create :temp-file})&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file-name \&quot;foo1.tmp\&quot;})&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file\&quot;foo.temp\&quot;})&quot; &quot;(defn cetl-file-temp-create\n  ([x &amp; {:keys [temp-create]}]\n   (let [file (:file x)\n         path (:path x)]\n     (if (= temp-create :temp-file)\n       (io/writer\n         (io/file\n           (str path \&quot;/\&quot; file)))))))&quot; &quot;(defn cetl-file-temp-create\n  ([x &amp; {:keys [temp-create]}]\n   (let [file (:file x)\n         path (:path x)]\n     (if (= temp-create :temp-file)\n       (io/writer\n         (io/file\n           (str path \&quot;/\&quot; file)))))\n    temp-create))&quot; &quot;(defn cetl-file-temp-create\n  [x &amp; {:keys [temp-create]}]\n  (let [file (:file x)\n        path (:path x)]\n    (println temp-create)\n    (io/writer\n      (io/file\n        (str path \&quot;/\&quot; file)))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file\&quot;foo.temp\&quot;\n                        :temp-create nil})&quot; &quot;(defn cetl-file-temp-create\n  [x &amp; {:keys [temp-create]}]\n  (let [file (:file x)\n        path (:path x)]\n    (if (= temp-create true)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file\&quot;foo.temp\&quot;\n                        :temp-create true})&quot; &quot;(defn foo \n  [x &amp; {:keys [tester]}]\n  )&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:temp-create x)]\n    (if (= :temp-create exec)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file\&quot;foo.temp\&quot;\n                        :temp-create :temp-file})&quot; &quot;(defn cetl-file-temp-create\n  [x &amp; {:keys [temp-create]}]\n  (let [file (:file x)\n        path (:path x)]\n    (if (= temp-create :temp-file)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file\&quot;foo2.temp\&quot;\n                        :temp-create :temp-file})&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:temp-create x)]\n    (if (= :temp-file exec)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))))&quot; &quot;(defn cetl-file-copy\n  [x]\n  (io/copy\n    (io/file (:in-file-path x))\n    (io/file (:out-file-path x))))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:temp-create x)]\n    (if (= exec :temp-file)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))))&quot; &quot;(defn cetl-file-copy\n  [x]\n  (let [file (:file x)\n        in-path (:in-file-path x)\n        out-path (:out-file-path x)\n        exec (:file-copy x)]\n    (if (= exec :copy-file)\n      (io/copy\n        (io/file (str in-path \&quot;/\&quot; file))\n        (io/file (str out-path \&quot;/\&quot;file))))))&quot; &quot;(defn cetl-file-copy\n  [x]\n  (let [file (:file x)\n        in-path (:in-path x)\n        out-path (:out-path x)\n        exec (:file-copy x)]\n    (if (= exec :copy-file)\n      (io/copy\n        (io/file (str in-path \&quot;/\&quot; file))\n        (io/file (str out-path \&quot;/\&quot;file))))))&quot; &quot;(cetl-file-copy {:file \&quot;foo.temp\&quot;\n                 :in-path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :out-path \&quot;/Users/gregadebesin/Development\&quot;\n                 :file-copy :copy-file})&quot; &quot;(defn cetl-file-copy\n  [x]\n  (let [file (:file x)\n        in-path (:in-path x)\n        out-path (:out-path x)\n        exec (:copy x)]\n    (if (= exec :copy-file)\n      (io/copy\n        (io/file (str in-path \&quot;/\&quot; file))\n        (io/file (str out-path \&quot;/\&quot;file))))))&quot; &quot;(defn cetl-file-delete\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:file-delete x)]\n    (if (= exec :delete-file))\n    (io/delete-file\n      (io/file\n        (str (:path x) \&quot;/\&quot; (:file-name x))))))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:create x)]\n    (if (= exec :file)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:create x)]\n    (if (= exec :temp-file)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))))&quot; &quot;(defn cetl-file-delete\n  [x]\n  (io/delete-file\n    (io/file\n      (str (:path x) \&quot;/\&quot; (:file-name x)))))&quot; &quot;(defn cetl-file-copy\n  [x]\n  (let [file (:file x)\n        in-path (:in-path x)\n        out-path (:out-path x)\n        exec (:copy x)]\n    (if (= exec :file)\n      (io/copy\n        (io/file (str in-path \&quot;/\&quot; file))\n        (io/file (str out-path \&quot;/\&quot;file))))))&quot; &quot;(cetl-file-copy {:file \&quot;foo22.temp\&quot;\n                 :in-path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :out-path \&quot;/Users/gregadebesin/Development\&quot;\n                 :copy :file})&quot; &quot;(cetl-file-copy {:file \&quot;foo.temp\&quot;\n                 :in-path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :out-path \&quot;/Users/gregadebesin/Development\&quot;\n                 :copy :file})&quot; &quot;(defn cetl-file-delete\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:delete x)]\n    (if (= exec :file)\n      (io/delete-file\n        (io/file\n          (str path \&quot;/\&quot; file))))))&quot; &quot;(cetl-file-delete{:file \&quot;archive.zip\&quot;\n                 :path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :delete :file})&quot; &quot;(cetl-file-delete{:file \&quot;foo.temp\&quot;\n                 :path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :delete :file})&quot; &quot;(ns cetl.file.management\n  (:require [clojure.string :as s]\n            [clojure.java.io :as io]\n            [clojure.set :refer [rename-keys]])\n  (:import (org.apache.commons.io FileUtils)\n           (java.io File)\n           (java.text SimpleDateFormat)))&quot; &quot;(use '[clojure.java.shell :only [sh]])&quot; &quot;(defmethod cetl-file-list :files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command  \&quot; find `pwd` -type f -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :result\n                (s/split\n                  (get (clojure.java.shell/sh\n                         \&quot;sh\&quot; \&quot;-c\&quot;\n                         (str move-to-dir (:path path)\n                              next-command\n                              command))\n                       :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmethod cetl-file-list :dirs\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command  \&quot; find `pwd` -type d -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :result\n                (s/split\n                  (get (clojure.java.shell/sh\n                         \&quot;sh\&quot; \&quot;-c\&quot;\n                         (str move-to-dir (:path path)\n                              next-command\n                              command))\n                       :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmethod cetl-file-list :dirs-only-sub-dirs\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command  \&quot; find `pwd` -type d \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :result\n                (s/split\n                  (get (clojure.java.shell/sh\n                         \&quot;sh\&quot; \&quot;-c\&quot;\n                         (str move-to-dir (:path path)\n                              next-command\n                              command))\n                       :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmulti cetl-file-archive (fn [x] (:exec x)))&quot; &quot;(defmethod cetl-file-archive :zip\n  [x]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        path (:path x)\n        file (:file x)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (File. path) next-command\n           zip-command (str file file-ext)\n           rec-command file))\n    (assoc x :result\n             (vector\n               (str (:path x) \&quot;/\&quot; (:file x) file-ext)))))&quot; &quot;(defmethod cetl-file-archive :gzip\n  [x]\n  (let [move-to-dir \&quot; cd \&quot;\n        gzip-command \&quot; tar -cvzf \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.tar.gz\&quot;\n        path (:path x)\n        file (:file x)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir  (File. path) next-command\n           gzip-command (str file file-ext\&quot; \&quot;file)))\n    (assoc x :result\n             (vector (str (:path x) \&quot;/\&quot; (:file x) file-ext)))))&quot; &quot;(defmulti cetl-file-encode (fn [x] (:exec x)))&quot; &quot;(defmethod cetl-file-encode :ISO-8859-1\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        file-path (str path \&quot;/\&quot; file)]\n    (FileUtils/write\n      (File. file-path)\n      (FileUtils/readFileToString\n        (File. file-path) \&quot;UTF-8\&quot;)\n      (name (:encode x))))\n  (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x)))))&quot; &quot;(defmethod cetl-file-encode :UTF-8\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        file-path (str path \&quot;/\&quot; file)]\n    (FileUtils/write\n      (File. file-path)\n      (FileUtils/readFileToString\n        (File. file-path) \&quot;ISO-8859-1\&quot;)\n      (name (:encode x))))\n  (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x)))))&quot; &quot;(defn cetl-file-copy\n  [x]\n  (let [file (:file x)\n        in-path (:in-path x)\n        out-path (:out-path x)\n        exec (:copy x)]\n    (if (= exec :file-copy)\n      (io/copy\n        (io/file (str in-path \&quot;/\&quot; file))\n        (io/file (str out-path \&quot;/\&quot;file))))\n    (rename-keys\n      (assoc x :result (vector (str (:in-path x) \&quot;/\&quot; (:file x))\n                               (str (:out-path x) \&quot;/\&quot; (:file x))))\n      {:copy :exec})))&quot; &quot;(defmulti cetl-file-list (fn [x] (:exec x)))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (rename-keys\n      (assoc path :result\n                  (s/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;))\n      {:list :exec})))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (rename-keys\n      (assoc path :result\n                  (s/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;)))))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :result\n                (s/split\n                  (get (clojure.java.shell/sh\n                         \&quot;sh\&quot; \&quot;-c\&quot;\n                         (str move-to-dir (:path path)\n                              next-command\n                              command))\n                       :out) #\&quot;\\n\&quot;))))&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development\&quot;\n                 :exec :dirs-and-files})&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:create x)]\n    (if (= exec :temp-file)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))\n    (rename-keys\n      (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))\n      {:create :exec})))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :exec)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))\n    (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development\&quot;\n                        :file \&quot;poo.txt\&quot;\n                        :exec :temp-file})&quot; &quot;(defn cetl-file-copy\n  [x]\n  (let [file (:file x)\n        in-path (:in-path x)\n        out-path (:out-path x)\n        exec (:exec x)]\n    (if (= exec :exec)\n      (io/copy\n        (io/file (str in-path \&quot;/\&quot; file))\n        (io/file (str out-path \&quot;/\&quot;file))))\n    (assoc x :result (vector (str (:in-path x) \&quot;/\&quot; (:file x))\n                             (str (:out-path x) \&quot;/\&quot; (:file x))))))&quot; &quot;(defn cetl-file-delete\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:delete x)]\n    (if (= exec :exec)\n      (io/delete-file\n        (io/file\n          (str path \&quot;/\&quot; file))))\n    (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time-millis (.lastModified file)\n        modified-time-str (.format (SimpleDateFormat. \&quot;yyyy-MM-dd HH:mm:ss.SSS\&quot;) modified-time-millis)]\n    (assoc x :result (vector abs-file-path parent-dir))))&quot; &quot;(defn cetl-file-delete\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :exec)\n      (io/delete-file\n        (io/file\n          (str path \&quot;/\&quot; file))))\n    (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))&quot; &quot;(cetl-file-properties {:path \&quot;/Users/gregadebesin/IdeaProjects/cetl/resources/test-file.txt\&quot;\n                       :exec :file-properties})&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file))))\n    (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file)))\n      (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x)))))))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file)))\n      (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x)))))\n    nil))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (io/writer\n        (io/file\n          (str path \&quot;/\&quot; file)))\n      (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))\n      nil)))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (do\n        (io/writer\n          (io/file\n            (str path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x)))))\n      nil)))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development\&quot;\n                        :file \&quot;poo1.txt\&quot;\n                        :exec :temp-file-create})&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development\&quot;\n                        :file \&quot;poo1.txt\&quot;\n                        :exec :temp-file-creat})&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development\&quot;\n                        :file \&quot;poo1222.txt\&quot;\n                        :exec :temp-file-create})&quot; &quot;(defn cetl-file-copy\n  [x]\n  (let [file (:file x)\n        in-path (:in-path x)\n        out-path (:out-path x)\n        exec (:exec x)]\n    (if (= exec :file-copy)\n      (do\n        (io/copy\n          (io/file (str in-path \&quot;/\&quot; file))\n          (io/file (str out-path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:in-path x) \&quot;/\&quot; (:file x))\n                                 (str (:out-path x) \&quot;/\&quot; (:file x))))) nil)))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (do\n        (io/writer\n          (io/file\n            (str path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))) nil)))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (do\n        (io/writer\n          (io/file\n            (str path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))))&quot; &quot;(defn cetl-delete-file\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :delete-file)\n      (do\n        (io/delete-file\n          (io/file\n            (str path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))))&quot; &quot;(defn cetl-file-copy\n  [x]\n  (let [file (:file x)\n        in-path (:in-path x)\n        out-path (:out-path x)\n        exec (:exec x)]\n    (if (= exec :file-copy)\n      (do\n        (io/copy\n          (io/file (str in-path \&quot;/\&quot; file))\n          (io/file (str out-path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:in-path x) \&quot;/\&quot; (:file x))\n                                 (str (:out-path x) \&quot;/\&quot; (:file x))))))))&quot; &quot;(defn cetl-emp-file-create\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (do\n        (io/writer\n          (io/file\n            (str path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))))&quot; &quot;(defn cetl-copy-file\n  [x]\n  (let [file (:file x)\n        in-path (:in-path x)\n        out-path (:out-path x)\n        exec (:exec x)]\n    (if (= exec :copy-file)\n      (do\n        (io/copy\n          (io/file (str in-path \&quot;/\&quot; file))\n          (io/file (str out-path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:in-path x) \&quot;/\&quot; (:file x))\n                                 (str (:out-path x) \&quot;/\&quot; (:file x))))))))&quot; &quot;(defn cetl-file-delete\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :delete-file)\n      (io/delete-file\n        (io/file\n          (str path \&quot;/\&quot; file))))\n    (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))&quot; &quot;(defn cetl-file-delete\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :delete-file)\n      (do\n        (io/delete-file\n          (io/file\n            (str path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))))&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development\&quot;\n                        :file \&quot;poo1222.txt\&quot;\n                        :exec :temp-file-creat})&quot; &quot;(cetl-delete-file  {    :path \&quot;/Users/gregadebesin/Development\&quot;\n                        :file \&quot;poo1222.txt\&quot;\n                        :exec :delete-file})&quot; &quot;(cetl-delete-file  {    :path \&quot;/Users/gregadebesin/Development\&quot;\n                        :file \&quot;poo1222.txt\&quot;\n                        :exec :delete-fil})&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time-millis (.lastModified file)\n        modified-time-str (.format (SimpleDateFormat. \&quot;yyyy-MM-dd HH:mm:ss.SSS\&quot;) modified-time-millis)\n        exec (:exec x)]\n    (if (= exec :file-properties)\n      (do (assoc x :result (vector file abs-file-path parent-dir file-name read-permissions write-permissions execute-permissions\n                                   file-size modified-time-millis modified-time-str))))))&quot; &quot;(defn cetl-file-properties\n  [x]\n  (let [file (File. (:path x))\n        abs-file-path (.getAbsolutePath file)\n        parent-dir (.getParent file)\n        file-name (.getName file)\n        read-permissions (.canRead file)\n        write-permissions (.canWrite file)\n        execute-permissions (.canExecute file)\n        file-size (-&gt;&gt; (reduce #(/ %1 %2) [(.length file) 1048576])\n                       double\n                       (format \&quot;%.3f\&quot;)\n                       read-string)\n        modified-time-millis (.lastModified file)\n        modified-time-str (.format (SimpleDateFormat. \&quot;yyyy-MM-dd HH:mm:ss.SSS\&quot;) modified-time-millis)\n        exec (:exec x)]\n    (if (= exec :file-properties)\n      (do (assoc x :result (vector abs-file-path parent-dir file-name read-permissions write-permissions execute-permissions\n                                   file-size modified-time-millis modified-time-str))))))&quot; &quot;(defmethod cetl-file-list :list-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :result\n                (s/split\n                  (get (clojure.java.shell/sh\n                         \&quot;sh\&quot; \&quot;-c\&quot;\n                         (str move-to-dir (:path path)\n                              next-command\n                              command))\n                       :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmethod cetl-file-list :list-dirs-sub-dirs\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command  \&quot; find `pwd` -type d \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :result\n                (s/split\n                  (get (clojure.java.shell/sh\n                         \&quot;sh\&quot; \&quot;-c\&quot;\n                         (str move-to-dir (:path path)\n                              next-command\n                              command))\n                       :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmethod cetl-file-archive :zip-file\n  [x]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        path (:path x)\n        file (:file x)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (File. path) next-command\n           zip-command (str file file-ext)\n           rec-command file))\n    (assoc x :result\n             (vector\n               (str (:path x) \&quot;/\&quot; (:file x) file-ext)))))&quot; &quot;(defmethod cetl-file-archive :gzip-file\n  [x]\n  (let [move-to-dir \&quot; cd \&quot;\n        gzip-command \&quot; tar -cvzf \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.tar.gz\&quot;\n        path (:path x)\n        file (:file x)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir  (File. path) next-command\n           gzip-command (str file file-ext\&quot; \&quot;file)))\n    (assoc x :result\n             (vector (str (:path x) \&quot;/\&quot; (:file x) file-ext)))))&quot; &quot;(defmethod cetl-file-encode :encode-UTF-8\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        file-path (str path \&quot;/\&quot; file)]\n    (FileUtils/write\n      (File. file-path)\n      (FileUtils/readFileToString\n        (File. file-path) \&quot;ISO-8859-1\&quot;)\n      (name (:encode x))))\n  (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x)))))&quot; &quot;(defmethod cetl-file-encode :encode-ISO-8859-1\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        file-path (str path \&quot;/\&quot; file)]\n    (FileUtils/write\n      (File. file-path)\n      (FileUtils/readFileToString\n        (File. file-path) \&quot;UTF-8\&quot;)\n      (name (:encode x))))\n  (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x)))))&quot; &quot;(defn cetl-create-temp-file\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :temp-file-create)\n      (do\n        (io/writer\n          (io/file\n            (str path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))))&quot; &quot;(defn cetl-create-temp-file\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        exec (:exec x)]\n    (if (= exec :create-temp-file)\n      (do\n        (io/writer\n          (io/file\n            (str path \&quot;/\&quot; file)))\n        (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x))))))))&quot; &quot;(defmulti cetl-encode-file (fn [x] (:exec x)))&quot; &quot;(defmethod cetl-encode-file :encode-file-ISO-8859-1\n  [x]\n  (let [file (:file x)\n        path (:path x)\n        file-path (str path \&quot;/\&quot; file)]\n    (FileUtils/write\n      (File. file-path)\n      (FileUtils/readFileToString\n        (File. file-path) \&quot;UTF-8\&quot;) \&quot;ISO-8859-1\&quot;))\n  (assoc x :result (vector (str (:path x) \&quot;/\&quot; (:file x)))))&quot; &quot;(cetl-file-properties {:path \&quot;/Users/gregadebesin/Development/datomic-code.txt\&quot;\n                       :exec :file-properties})&quot;], :remote []}}</component>
</project>