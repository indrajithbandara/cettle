<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1443649429240">{:repl-history {:ide [], :local [&quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot; \\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\\\\\\&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\\&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\ \&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;$\\\\ \&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\\\\\ \&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\\\\\\\\\ \&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\$\\\\\&quot;)&quot; &quot;(clojure.string/replace \&quot;The color? is red.\&quot; #\&quot;([?.])\&quot; \&quot;\\\\$\\\\ \&quot;)&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot;$\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(.replaceAll  %  \&quot; \&quot; \&quot;$\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace ))&quot; &quot;(map #(.replaceA  %  \&quot; \&quot; \&quot;$\\\\\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot;(\\s)\&quot; \&quot;\\\\ \&quot;) (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                                                             :list :dirs}))&quot; &quot;(map #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\ \&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;(mapv #(clojure.string/replace % #\&quot;\\\\ \&quot; \&quot;\\\\\\\\ \&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;[\&quot;/some/path/file\\ 1\&quot; \&quot;/some/path/file\\ 2\&quot;]&quot; &quot;[\&quot;/some/path/file\\\\ 1\&quot; \&quot;/some/path/file\\\\ 2\&quot;]&quot; &quot;(mapv #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\ \&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;(defmulti cetl-file-archive (fn [x] (:archive x)))\n\n(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (str move-to-dir (-&gt; (File. get-path .getParent)) next-command\n         zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n         rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last))))&quot; &quot;(defmulti cetl-file-archive (fn [x] (:archive x)))\n\n(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (str move-to-dir (-&gt; (File. get-path (.getParent))) next-command\n         zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n         rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last))))&quot; &quot;(defmulti cetl-file-archive (fn [x] (:archive x)))\n\n(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (str move-to-dir (.getParent (File. get-path)) next-command\n         zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n         rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last))))&quot; &quot;(defmulti cetl-file-archive (fn [x] (:archive x)))&quot; &quot;(defmethod cetl-file-archive :zip\n  [path]\n  (clojure.java.shell/sh\n    \&quot;sh\&quot; \&quot;-c\&quot;\n    (str \&quot; cd \&quot; (.getParent (File. (:path path))) \&quot;/;\&quot;\n         \&quot; zip \&quot; (last (s/split (:path path) #\&quot;/\&quot;)) \&quot;.zip\&quot;\n         \&quot; -r \&quot; (last (s/split (:path path) #\&quot;/\&quot;)))))&quot; &quot;(cetl-file-archive {:path \&quot;/Users/gregadebesin/Development/Cetl/TestFiles\&quot;\n                    :archive :zip})&quot; &quot;(mapv #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\\\\\ \&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;(mapv #(clojure.string/replace % #\&quot; \&quot; \&quot;\\\\\\\\\&quot;) [\&quot;/some/path/file 1\&quot; \&quot;/some/path/file 2\&quot;])&quot; &quot;(ns cetl.file.management\n  (:require [clojure.string :as s])\n  (:import (org.apache.commons.io FileUtils)\n           (java.io File)))&quot; &quot;3&quot; &quot;(clojure.java.io/file \&quot;/Users/gregadebesin/Cetl/foo.tmp\&quot;)&quot; &quot;(spit \&quot;/Users/gregadebesin/Cetl/foo.tmp\&quot;)&quot; &quot;(defmulti cetl-file-temp-create (fn [x] (:create x)))&quot; &quot;(clojure.java.io/writer (File. \&quot;/Users/gregadebesin/Development/Cetl/foo.tmp\&quot;))&quot; &quot;(defmethod cetl-file-temp-create :temp-file\n  [x]\n  (clojure.java.io/writer\n    (File. (str (:path x) (:file-name)))))\n&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;})&quot; &quot;(defmethod cetl-file-temp-create :temp-file\n  [x]\n  (clojure.java.io/writer\n    (File. (str (:path x) \&quot;/\&quot; (:file-name)))))\n&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file-name \&quot;baz.tmp\&quot;})&quot; &quot;(defmulti cetl-file-copy (fn [x] (:copy x)))&quot; &quot;(ns cetl.file.management\n  (:require [clojure.string :as s\n             clojure.java.io :as io])\n  (:import (org.apache.commons.io FileUtils)\n           (java.io File)))&quot; &quot;(ns cetl.file.management\n  (:require [[clojure.string :as s]\n             [clojure.java.io :as io]])\n  (:import (org.apache.commons.io FileUtils)\n           (java.io File)))&quot; &quot;(cetl-file-temp-create {:create :temp-file\n                        :path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file-name \&quot;baz.tmp\&quot;})&quot; &quot;(defmethod cetl-file-temp-create :temp-file\n  [x]\n  (clojure.java.io/writer\n    (File. (str (:path x) \&quot;/\&quot; (:file-name x)))))\n&quot; &quot;(defmethod cetl-file-copy :copy\n  [x]\n  (io/copy (:in-file-path x) (:out-file-path x)))&quot; &quot;(cetl-file-copy {)&quot; &quot;(defmethod cetl-file-copy :file\n  [x]\n  (io/copy (:in-file-path x) (:out-file-path x)))&quot; &quot;(defn cetl-file-temp-create\n  [x]\n  (io/writer\n    (File.\n      (str (:path x) \&quot;/\&quot; (:file-name x)))))&quot; &quot;(cetl-file-copy {:copy :file\n                 :})&quot; &quot;(cetl-file-temp-create {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :file-name \&quot;baz2.tmp\&quot;})&quot; &quot;(defn cetl-file-copy\n  [x]\n  (io/copy (:in-file-path x) (:out-file-path x)))&quot; &quot;(defn cetl-file-copy\n  [x]\n  (io/copy (io/file :in-file-path x) (io/file :out-file-path x)))&quot; &quot;(defn cetl-file-copy\n  [x]\n  (io/copy (io/file (:in-file-path x)) (io/file (:out-file-path x))))&quot; &quot;(cetl-file-copy {:in-file-path \&quot;/Users/gregadebesin/Development/Cetl/baz2.tmp\&quot;\n                 :out-file-path \&quot;/Users/gregadebesin/Development/Cetl/baz299.tmp\&quot;})&quot; &quot;(ns cetl.file.management\n  (:require [clojure.string :as s]\n            [clojure.java.io :as io])\n  (:import (org.apache.commons.io FileUtils)\n           (java.io File)))&quot; &quot;(use '[clojure.java.shell :only [sh]])&quot; &quot;(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (.getParent (File. get-path)) next-command\n           zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n           rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last))))\n  path)&quot; &quot;(:path {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;})&quot; &quot;((comp :archive :path) {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;})&quot; &quot;(keys {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;})&quot; &quot;(cons {} {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;})&quot; &quot;(conj {} {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;})&quot; &quot;(conj {:path \&quot;\&quot;} {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;})&quot; &quot;(conj {(:path \&quot;\&quot;)} {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;})&quot; &quot;2&quot; &quot;(assoc :path \&quot;\&quot; {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;})&quot; &quot;(assoc {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;} :path \&quot;\&quot;)&quot; &quot;(assoc {:archive :zip, :path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;} :path (str (:path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;) \&quot;.zip\&quot;))&quot; &quot;(assoc path :path (str (:path path) \&quot;.zip\&quot;))&quot; &quot;(defmethod cetl-file-archive :gzip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        gzip-command \&quot; tar -cvzf \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.tar.gz \&quot;\n        get-path (:path path)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (.getParent (File. get-path)) next-command\n           gzip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n           (-&gt; (s/split get-path #\&quot;/\&quot;) last)))))&quot; &quot;(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (.getParent (File. get-path)) next-command\n           zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n           rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last))))\n  (assoc path :path (str (:path path) \&quot;.zip\&quot;)))&quot; &quot;(defmethod cetl-file-archive :gzip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        gzip-command \&quot; tar -cvzf \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.tar.gz \&quot;\n        get-path (:path path)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (.getParent (File. get-path)) next-command\n           gzip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n           (-&gt; (s/split get-path #\&quot;/\&quot;) last))))\n  (assoc path :path (str (:path path) \&quot;.tar.gz\&quot;)))&quot; &quot;()&quot; &quot;(defmethod cetl-file-archive :zip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        zip-command \&quot; zip \&quot;\n        rec-command \&quot; -r \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.zip\&quot;\n        get-path (:path path)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (.getParent (File. get-path)) next-command\n           zip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n           rec-command (-&gt; (s/split get-path #\&quot;/\&quot;) last)))\n    (assoc path :path (str (:path path) file-ext))))&quot; &quot;(defmethod cetl-file-archive :gzip\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        gzip-command \&quot; tar -cvzf \&quot;\n        next-command \&quot;;\&quot;\n        file-ext \&quot;.tar.gz \&quot;\n        get-path (:path path)]\n    (clojure.java.shell/sh\n      \&quot;sh\&quot; \&quot;-c\&quot;\n      (str move-to-dir (.getParent (File. get-path)) next-command\n           gzip-command (-&gt; (s/split get-path #\&quot;/\&quot;) last) file-ext\n           (-&gt; (s/split get-path #\&quot;/\&quot;) last)))\n    (assoc path :path (str (:path path) file-ext))))&quot; &quot;(cetl-file-archive {:path \&quot;/Users/gregadebesin/Development/Cetl/archive\&quot;\n                    :archive :zip})&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (clojure.string/split\n    (get (clojure.java.shell/sh\n           \&quot;sh\&quot; \&quot;-c\&quot;\n           (str \&quot; cd \&quot; (:path path) \&quot;;\&quot;\n                \&quot; find `pwd` -maxdepth 1 \&quot;))\n         :out) #\&quot;\\n\&quot;)\n  path)&quot; &quot;(cetl-file-list {:list :dirs-and-files\n                 :path \&quot;/Users/gregadebesin/Develpment/Cetl\&quot;})&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (clojure.string/split\n    (get (clojure.java.shell/sh\n           \&quot;sh\&quot; \&quot;-c\&quot;\n           (str \&quot; cd \&quot; (:path path) \&quot;;\&quot;\n                \&quot; find `pwd` -maxdepth 1 \&quot;))\n         :out) #\&quot;\\n\&quot;)\n  )&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [command\n        (clojure.string/split\n          (get (clojure.java.shell/sh\n                 \&quot;sh\&quot; \&quot;-c\&quot;\n                 (str \&quot; cd \&quot; (:path path) \&quot;;\&quot;\n                      \&quot; find `pwd` -maxdepth 1 \&quot;))\n               :out) #\&quot;\\n\&quot;)]\n    command))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.string/split\n      (get (clojure.java.shell/sh\n             \&quot;sh\&quot; \&quot;-c\&quot;\n             (str move-to-dir (:path path) next-command\n                  command)\n             :out) #\&quot;\\n\&quot;))))&quot; &quot;(cetl-file-list {:list :dirs-and-files\n                 :path \&quot;/Users/gregadebesin/Development/Cetl\&quot;})&quot; &quot;(-&gt; [\&quot;hello\&quot;] (assoc {:foo 2} :foo ))&quot; &quot;(assoc {:foo 2} :foo [])&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path \n      (clojure.string/split\n        (get (clojure.java.shell/sh\n               \&quot;sh\&quot; \&quot;-c\&quot;\n               (str move-to-dir (:path path) next-command\n                    command))\n             :out) #\&quot;\\n\&quot;))))&quot; &quot;(assoc {} :poo \&quot;\&quot;)&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :list\n      (clojure.string/split\n        (get (clojure.java.shell/sh\n               \&quot;sh\&quot; \&quot;-c\&quot;\n               (str move-to-dir (:path path) next-command\n                    command))\n             :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :list\n      (clojure.string/split\n        (get (clojure.java.shell/sh\n               \&quot;sh\&quot; \&quot;-c\&quot;\n               (str move-to-dir (:path path) next-command\n                    command))\n             :out) #\&quot;\\n\&quot;))\n    path))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :l\n      (clojure.string/split\n        (get (clojure.java.shell/sh\n               \&quot;sh\&quot; \&quot;-c\&quot;\n               (str move-to-dir (:path path) next-command\n                    command))\n             :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.string/split\n      (get (clojure.java.shell/sh\n             \&quot;sh\&quot; \&quot;-c\&quot;\n             (str move-to-dir (:path path) next-command\n                  command))\n           :out) #\&quot;\\n\&quot;)))&quot; &quot;(cetl-file-archive {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                    :list :dirs-and-files})&quot; &quot;(cetl-file- {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                    :list :dirs-and-files})&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :dirs-and-files\n      (clojure.string/split\n        (get (clojure.java.shell/sh\n               \&quot;sh\&quot; \&quot;-c\&quot;\n               (str move-to-dir (:path path) next-command\n                    command))\n             :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :value\n      (clojure.string/split\n        (get (clojure.java.shell/sh\n               \&quot;sh\&quot; \&quot;-c\&quot;\n               (str move-to-dir (:path path) next-command\n                    command))\n             :out) #\&quot;\\n\&quot;))))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (assoc path :value\n      (clojure.string/split\n        (get (clojure.java.shell/sh\n               \&quot;sh\&quot; \&quot;-c\&quot;\n               (str move-to-dir (:path path) \n                    next-command\n                    command))\n             :out) #\&quot;\\n\&quot;))))&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                    :list :dirs-and-files})&quot; &quot;(:value(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                  :list :dirs-and-files}))&quot; &quot;(:dirs-and-files (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :list :dirs-and-files}))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (clojure.string/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;)) {:list :execution})))&quot; &quot;(:list (cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                        :list :dirs-and-files}))&quot; &quot;(defmethod cetl-file-list :dirs-and-files\n  [path]\n  (let [move-to-dir \&quot; cd \&quot;\n        command \&quot; find `pwd` -maxdepth 1 \&quot;\n        next-command \&quot;;\&quot;]\n    (clojure.set/rename-keys\n      (assoc path :value\n                  (clojure.string/split\n                    (get (clojure.java.shell/sh\n                           \&quot;sh\&quot; \&quot;-c\&quot;\n                           (str move-to-dir (:path path)\n                                next-command\n                                command))\n                         :out) #\&quot;\\n\&quot;)) {:list :exec})))&quot; &quot;(cetl-file-list {:path \&quot;/Users/gregadebesin/Development/Cetl\&quot;\n                 :list :dirs-and-files})&quot;], :remote []}}</component>
</project>